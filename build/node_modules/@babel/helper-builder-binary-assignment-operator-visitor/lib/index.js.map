{"version":3,"sources":["../../../../../node_modules/@babel/helper-builder-binary-assignment-operator-visitor/lib/index.js"],"names":["Object","defineProperty","exports","value","default","_default","_helperExplodeAssignableExpression","data","_interopRequireDefault","require","t","_interopRequireWildcard","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","desc","getOwnPropertyDescriptor","get","set","opts","build","operator","AssignmentExpression","path","node","scope","nodes","exploded","left","push","assignmentExpression","ref","uid","right","replaceWith","sequenceExpression","BinaryExpression"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nfunction _helperExplodeAssignableExpression() {\n  const data = _interopRequireDefault(require(\"@babel/helper-explode-assignable-expression\"));\n\n  _helperExplodeAssignableExpression = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction t() {\n  const data = _interopRequireWildcard(require(\"@babel/types\"));\n\n  t = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _default(opts) {\n  const {\n    build,\n    operator\n  } = opts;\n  return {\n    AssignmentExpression(path) {\n      const {\n        node,\n        scope\n      } = path;\n      if (node.operator !== operator + \"=\") return;\n      const nodes = [];\n      const exploded = (0, _helperExplodeAssignableExpression().default)(node.left, nodes, this, scope);\n      nodes.push(t().assignmentExpression(\"=\", exploded.ref, build(exploded.uid, node.right)));\n      path.replaceWith(t().sequenceExpression(nodes));\n    },\n\n    BinaryExpression(path) {\n      const {\n        node\n      } = path;\n\n      if (node.operator === operator) {\n        path.replaceWith(build(node.left, node.right));\n      }\n    }\n\n  };\n}"],"file":"index.js"}